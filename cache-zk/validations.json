{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:39"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Nonces.sol:Nonces": {
        "src": "@openzeppelin/contracts/utils/Nonces.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nonces(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Nonces",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/utils/Nonces.sol:14"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "0541d39dfe173ebcead71e95b1cc2a0495fc0f56638ac7c86817e086ebe468ec",
          "withoutMetadata": "0541d39dfe173ebcead71e95b1cc2a0495fc0f56638ac7c86817e086ebe468ec",
          "linkedWithoutMetadata": "0541d39dfe173ebcead71e95b1cc2a0495fc0f56638ac7c86817e086ebe468ec"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/utils/Pausable.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/ShortStrings.sol:ShortStrings": {
        "src": "@openzeppelin/contracts/utils/ShortStrings.sol:40",
        "version": {
          "withMetadata": "7488a34b06824080436d2e097cc6d15df714aaf4c280368d1829aaf3ac86156f",
          "withoutMetadata": "7488a34b06824080436d2e097cc6d15df714aaf4c280368d1829aaf3ac86156f",
          "linkedWithoutMetadata": "7488a34b06824080436d2e097cc6d15df714aaf4c280368d1829aaf3ac86156f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "210e190220331bc77cf68328eaf0571fe4e6ec9d2c8554e77355791b48904a6a",
          "withoutMetadata": "210e190220331bc77cf68328eaf0571fe4e6ec9d2c8554e77355791b48904a6a",
          "linkedWithoutMetadata": "210e190220331bc77cf68328eaf0571fe4e6ec9d2c8554e77355791b48904a6a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "5d768ff395656eb3069591761a354f241c23daeb48286684383d2527f344e224",
          "withoutMetadata": "5d768ff395656eb3069591761a354f241c23daeb48286684383d2527f344e224",
          "linkedWithoutMetadata": "5d768ff395656eb3069591761a354f241c23daeb48286684383d2527f344e224"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:12",
        "version": {
          "withMetadata": "2a4e0a456ef62da0f3282960eddf7e9d832818fd5f6a5602406b4e416da29346",
          "withoutMetadata": "2a4e0a456ef62da0f3282960eddf7e9d832818fd5f6a5602406b4e416da29346",
          "linkedWithoutMetadata": "2a4e0a456ef62da0f3282960eddf7e9d832818fd5f6a5602406b4e416da29346"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267"
        ],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:66"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EIP712",
              "label": "_nameFallback",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:51"
            },
            {
              "contract": "EIP712",
              "label": "_versionFallback",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "e714a4d5e553d251b85727d270b946529c60a3f5b112ef6cfd6fada9c15e26d0",
          "withoutMetadata": "e714a4d5e553d251b85727d270b946529c60a3f5b112ef6cfd6fada9c15e26d0",
          "linkedWithoutMetadata": "e714a4d5e553d251b85727d270b946529c60a3f5b112ef6cfd6fada9c15e26d0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "a445929f8a58e8d8c2c19c59a7c61ef19dd2071d54d4650fa5a97c57e6a08ada",
          "withoutMetadata": "a445929f8a58e8d8c2c19c59a7c61ef19dd2071d54d4650fa5a97c57e6a08ada",
          "linkedWithoutMetadata": "a445929f8a58e8d8c2c19c59a7c61ef19dd2071d54d4650fa5a97c57e6a08ada"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "b139c317f1df7e3278699c49c9bc291a1d8b3ddbe1c5cb555366920e4f475459",
          "withoutMetadata": "b139c317f1df7e3278699c49c9bc291a1d8b3ddbe1c5cb555366920e4f475459",
          "linkedWithoutMetadata": "b139c317f1df7e3278699c49c9bc291a1d8b3ddbe1c5cb555366920e4f475459"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "f4279510c324ddbfa3ae4ea6627d88a307be0369d5fee94e8c5b8444226b2999",
          "withoutMetadata": "f4279510c324ddbfa3ae4ea6627d88a307be0369d5fee94e8c5b8444226b2999",
          "linkedWithoutMetadata": "f4279510c324ddbfa3ae4ea6627d88a307be0369d5fee94e8c5b8444226b2999"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/ClubhouseMain.sol:ClubhouseMain": {
        "src": "contracts/ClubhouseMain.sol:16",
        "version": {
          "withMetadata": "d155fb656dd2807ac6db9a27a5a2221baddb0f79ff96f1231a73730e88a02d7c",
          "withoutMetadata": "d155fb656dd2807ac6db9a27a5a2221baddb0f79ff96f1231a73730e88a02d7c",
          "linkedWithoutMetadata": "d155fb656dd2807ac6db9a27a5a2221baddb0f79ff96f1231a73730e88a02d7c"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setMultiSigOwners(address[],uint256)",
          "setTrustedSigner(address)",
          "deposit(uint256)",
          "depositWithMetaTx(address,uint256,uint256,uint8,bytes32,bytes32)",
          "collectTournamentFee(uint256)",
          "getMessageHash(address,uint256,string,uint256)",
          "getEthSignedMessageHash(bytes32)",
          "withdrawWithSignature(address,uint256,uint256,string,uint256,bytes)",
          "withdrawToUser(address,uint256)",
          "getMessageHashForOwnerWithdrawal(address,uint256,address)",
          "emergencyWithdraw(address,uint256,bytes[])",
          "withdrawTournamentFee(address,uint256,bytes[])",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ClubhouseMain",
            "src": "contracts/ClubhouseMain.sol:87"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ClubhouseMain",
              "label": "tmkocToken",
              "type": "t_contract(IERC20)902",
              "src": "contracts/ClubhouseMain.sol:20"
            },
            {
              "contract": "ClubhouseMain",
              "label": "tmkocPermitToken",
              "type": "t_contract(IERC20Permit)1118",
              "src": "contracts/ClubhouseMain.sol:23"
            },
            {
              "contract": "ClubhouseMain",
              "label": "trustedSigner",
              "type": "t_address",
              "src": "contracts/ClubhouseMain.sol:26"
            },
            {
              "contract": "ClubhouseMain",
              "label": "totalTournamentFees",
              "type": "t_uint256",
              "src": "contracts/ClubhouseMain.sol:29"
            },
            {
              "contract": "ClubhouseMain",
              "label": "usedNonces",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "src": "contracts/ClubhouseMain.sol:32"
            },
            {
              "contract": "ClubhouseMain",
              "label": "isMultiSigOwner",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/ClubhouseMain.sol:35"
            },
            {
              "contract": "ClubhouseMain",
              "label": "multiSigOwners",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/ClubhouseMain.sol:38"
            },
            {
              "contract": "ClubhouseMain",
              "label": "minApprovals",
              "type": "t_uint256",
              "src": "contracts/ClubhouseMain.sol:41"
            }
          ],
          "types": {
            "t_contract(IERC20)902": {
              "label": "contract IERC20"
            },
            "t_contract(IERC20Permit)1118": {
              "label": "contract IERC20Permit"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/ClubhouseVault.sol:ClubhouseVault": {
        "src": "contracts/ClubhouseVault.sol:15",
        "version": {
          "withMetadata": "bdc4524ba4cbb7e0f5976a2900eac530f176e99b9831fd017087fe7c29992ecb",
          "withoutMetadata": "bdc4524ba4cbb7e0f5976a2900eac530f176e99b9831fd017087fe7c29992ecb",
          "linkedWithoutMetadata": "bdc4524ba4cbb7e0f5976a2900eac530f176e99b9831fd017087fe7c29992ecb"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setMultiSigOwners(address[],uint256)",
          "setTrustedSigner(address)",
          "deposit(uint256)",
          "collectTournamentFee(uint256)",
          "getMessageHash(address,uint256,string,uint256)",
          "getEthSignedMessageHash(bytes32)",
          "withdrawWithSignature(address,uint256,uint256,string,uint256,bytes)",
          "getMessageHashForOwnerWithdrawal(address,uint256,address)",
          "emergencyWithdraw(address,uint256,bytes[])",
          "withdrawTournamentFee(address,uint256,bytes[])",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ClubhouseVault",
            "src": "contracts/ClubhouseVault.sol:83"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ClubhouseVault",
              "label": "tmkocToken",
              "type": "t_contract(IERC20)902",
              "src": "contracts/ClubhouseVault.sol:19"
            },
            {
              "contract": "ClubhouseVault",
              "label": "trustedSigner",
              "type": "t_address",
              "src": "contracts/ClubhouseVault.sol:22"
            },
            {
              "contract": "ClubhouseVault",
              "label": "totalTournamentFees",
              "type": "t_uint256",
              "src": "contracts/ClubhouseVault.sol:25"
            },
            {
              "contract": "ClubhouseVault",
              "label": "usedNonces",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "src": "contracts/ClubhouseVault.sol:28"
            },
            {
              "contract": "ClubhouseVault",
              "label": "isMultiSigOwner",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/ClubhouseVault.sol:31"
            },
            {
              "contract": "ClubhouseVault",
              "label": "multiSigOwners",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/ClubhouseVault.sol:34"
            },
            {
              "contract": "ClubhouseVault",
              "label": "minApprovals",
              "type": "t_uint256",
              "src": "contracts/ClubhouseVault.sol:37"
            }
          ],
          "types": {
            "t_contract(IERC20)902": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/TMKOC.sol:TaarakMehtaKaOoltahChashmash": {
        "src": "contracts/TMKOC.sol:13",
        "version": {
          "withMetadata": "0c67055aa2d3528fd82b53bb0d1d1536eb7843c5e16711217568ae8625a919d2",
          "withoutMetadata": "0c67055aa2d3528fd82b53bb0d1d1536eb7843c5e16711217568ae8625a919d2",
          "linkedWithoutMetadata": "0c67055aa2d3528fd82b53bb0d1d1536eb7843c5e16711217568ae8625a919d2"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
          "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TaarakMehtaKaOoltahChashmash",
            "src": "contracts/TMKOC.sol:22"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    }
  ]
}